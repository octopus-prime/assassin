using testing ;

project assassin
	:
		requirements
		<cxxflags>-std=c++17
        <cxxflags>-march=native
		<include>source
		<define>BOOST_ALL_DYN_LINK
#		<cxxflags>-pg
#        <cxxflags>-fopenmp
        <variant>debug:<cxxflags>--coverage
        <variant>debug:<linkflags>--coverage
	;

obj hash : source/hash.cpp ;
obj io : source/io.cpp ;
obj node_creator : source/node_creator.cpp ;
obj node_executor : source/node_executor.cpp ;
obj move_generator : source/move_generator.cpp ;
obj exchanger : source/exchanger.cpp ;
obj evaluator : source/evaluator.cpp ;
obj searcher : source/searcher2.cpp ;
obj analyzer : source/analyzer.cpp ;
#obj tbprobe : source/tbprobe.cpp ;

exe assassin
    :
        hash
        io
        node_creator
        node_executor
        move_generator
        exchanger
        evaluator
        searcher
        analyzer
#       tbprobe
        source/engine.cpp
        /site-config//tbb
        /site-config//pthread
#        /site-config//gomp
    ;

exe learn
    :
        hash
        io
        node_creator
        node_executor
        move_generator
        exchanger
        evaluator
        searcher
        analyzer
#       tbprobe
        source/learn.cpp
        /site-config//tbb
        /site-config//pthread
#        /site-config//gomp
    ;

unit-test assassin-test
	:
		hash
		io
		node_creator
		node_executor
		move_generator
		exchanger
		evaluator
		searcher
		analyzer
#		tbprobe
		[ glob test/*.cpp ]
		/site-config//tbb
		/site-config//pthread
#        /site-config//gomp
		/site-config//boost_unit_test_framework
	;
